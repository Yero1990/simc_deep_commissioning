head	1.10;
access;
symbols;
locks
	mdn:1.10; strict;
comment	@ * @;


1.10
date	2003.06.12.01.20.55;	author mdn;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.08.21.29.07;	author mdn;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.08.20.32.15;	author mdn;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.03.02.13.18;	author mdn;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.31.22.44.32;	author mdn;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.31.21.47.28;	author mdn;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.31.20.43.59;	author mdn;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.31.19.59.23;	author mdn;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.31.19.18.07;	author mdn;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.31.17.09.03;	author mdn;	state Exp;
branches;
next	;


desc
@Start
@


1.10
log
@*** empty log message ***
@
text
@/***************************************************************************

    THistogrator.C - Histogrator base class

    begin                : Sun Jun 08 2003
    version              : 1
    author               : Micha D. Niskin
    email                : mniskin@@yahoo.com

    Copyright (C) 2003 Micha D. Niskin

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

 ***************************************************************************/

//this does nothing

#include "THistogrator.h"

ClassImp(THistogrator)
   
THistogrator::THistogrator():TAttFill(), TAttLine()
{
   fAssocHist = 0;
   fCanvas = 0;
   fCut = 0;
   fHist = 0;
   fPad = 0;
   fState = kZOMBIE;
   fStats = 0;
}

//-----------------------------------------------------------------------------

THistogrator::THistogrator(const char *name, const char *title, TH1 * h,
                           TH1 *ah):TAttFill(), TAttLine()
{
   fCut = 0;
   fStats = new TPaveStats;

   fHist = h;
   fHist->SetNameTitle(name, title);
   fHist->SetStats(kFALSE);
   fHist->SetDrawOption("HIST");

   fAssocHist = ah;

   fPad = (TPad *) grootutil::GetPad(fAssocHist);
   fCanvas = (TCanvas *) fPad->GetCanvas();
   fCanvas->Connect("ProcessedEvent(Int_t,Int_t,Int_t,TObject*)",
                    "THistogrator", this,
                    "GotMouseEvent(Int_t,Int_t,Int_t,TObject*)");
   fCanvas->Connect("Closed()", "THistogrator", this, "GotClosed()");

   TString option = (const char *) fAssocHist->GetDrawOption();
   option.ToUpper();
   if (strstr((const char *) option, "LEGO") || 
       strstr((const char *) option, "SURF")) {
      char text[128];
      snprintf(text, sizeof(text),
               "Integrating histogram with option '%s' not implemented",
               (const char*) option);
      grootutil::WarnMsgBox(text);
      fState = kZOMBIE;
   } else {
      fState = kNEW;
   }
}

//-----------------------------------------------------------------------------

THistogrator::~THistogrator()
{
   TDialogCanvas *d;
   TSeqCollection *l = gROOT->GetListOfCanvases();
   if ( (d = (TDialogCanvas*) l->FindObject("R__attfill")) )
      delete d;
   if ( (d = (TDialogCanvas*) l->FindObject("R__attline")) )
      delete d;
   if (fCanvas)
      fCanvas->Disconnect(fCanvas, 0, this, 0);
   if (fStats)
      delete fStats;
   if (fHist)
      delete fHist;
}

//-----------------------------------------------------------------------------

void THistogrator::DelCut() {
   if (fCut) {
      gDirectory->RecursiveRemove((TObject *)fCut);
      delete fCut;
      fCut = 0;
   }
}

//-----------------------------------------------------------------------------

bool THistogrator::CheckIfZombie()
{
   if (fHist && !grootutil::GetPad(fHist)) {
      fState = kZOMBIE;
      fHist = 0;
   }
   if (fAssocHist && !grootutil::GetPad(fAssocHist)) {
      fState = kZOMBIE;
      fAssocHist = 0;
   }
   if (fCanvas && !grootutil::GetPad(fCanvas)) {
      fState = kZOMBIE;
      fCanvas = 0;
   }
   if (fPad && !grootutil::GetPad(fPad)) {
      fState = kZOMBIE;
      fPad = 0;
   }
   if (fCut && !grootutil::GetPad(fCut)) {
      fState = kZOMBIE;
      fCut = 0;
   }
   if (fState == kZOMBIE) {
      return kTRUE;
   } else {
      return kFALSE;
   }
}

//-----------------------------------------------------------------------------

void THistogrator::GotMouseEvent(Int_t evt, Int_t x, Int_t y,
                                 TObject * sel)
{
   TCanvas *cnv = (TCanvas *) gTQSender;
   TPad *pad = (TPad *) cnv->GetSelectedPad();
   if (pad != fPad)
      return;

   double padx = fPad->AbsPixeltoX(x);
   double pady = fPad->AbsPixeltoY(y);

   switch (evt) {
   case kButton1Up:
      ExecuteButton1Up(padx, pady);
      break;
   case kMouseMotion:
      ExecuteMotion(padx, pady);
      break;
   case kKeyPress:
      ExecuteKey();
      break;
   default:
      break;
   }
}
@


1.9
log
@*** empty log message ***
@
text
@d28 2
@


1.8
log
@*** empty log message ***
@
text
@d2 4
a5 3
    THistogrator.C - histogrator base class
                             -------------------
    begin                : Fri Jun 06 2003
d9 17
a31 2
//-----------------------------------------------------------------------------

@


1.7
log
@*** empty log message ***
@
text
@d1 9
d13 1
d15 2
a16 1
THistogrator::THistogrator():fOrigDrawOption()
d20 1
d30 1
a30 2
                           TH1 *ah):fOrigDrawOption((const char *) ah->
                           GetDrawOption())
d32 1
d51 7
a57 5
   if (strstr((const char *) option, "LEGO")
       || strstr((const char *) option, "SURF")) {
      Warning("THistogrator",
              "Integrating histogram with option '%s' not implemented",
              (const char*) option);
a61 1

d68 6
d76 13
a88 6
   delete fStats;
   delete fHist;
   if (grootutil::GetPad(fAssocHist)) {
      fAssocHist->SetDrawOption((const char *) fOrigDrawOption);
      fCanvas->Modified();
      fCanvas->Update();
d96 9
a104 2
   if ((fState == kZOMBIE) || !grootutil::GetPad(fHist) ||
       !grootutil::GetPad(fAssocHist) || !fCanvas) {
d106 11
a120 13
   return kFALSE;
}

//-----------------------------------------------------------------------------

void THistogrator::Paint()
{
   fPad->cd();
   fStats->Pop();
   fHist->Paint();
   fStats->Paint();
   fCanvas->Modified();
   fCanvas->Update();
@


1.6
log
@*** empty log message ***
@
text
@d5 1
a5 1
THistogrator::THistogrator()
d17 3
a19 1
THistogrator::THistogrator(const char *name, const char *title, TH1 *h, TH1 *ah)
d26 1
a29 2
   fState = kNEW;

d36 13
d59 5
@


1.5
log
@*** empty log message ***
@
text
@d66 1
@


1.4
log
@*** empty log message ***
@
text
@d17 1
a17 1
THistogrator::THistogrator(const char *name, const char *title, TH1 * h)
a19 1
   gDirectory->Add(fStats);
d21 1
a21 1
   fHist = (TH1 *) h->Clone();
d25 1
a25 1
   fAssocHist = h;
@


1.3
log
@*** empty log message ***
@
text
@d20 1
@


1.2
log
@*** empty log message ***
@
text
@a3 1

d5 2
a6 2

THistogrator::THistogrator() {
d17 1
a17 1
THistogrator::THistogrator(TH1 * h, TH1 * ah)
d20 7
a26 2
   fHist = h;
   fAssocHist = ah;
@


1.1
log
@Initial revision
@
text
@d5 1
a5 5
THistogrator::THistogrator(TH1 *h, TH1 *ah) {
	fStats = new TPaveStats;
	fHist = h;
	fAssocHist = ah;
	fState = kNEW;
d7 7
a13 5
	fPad = (TPad *) grootutil::GetPad(fAssocHist);
	fCanvas = (TCanvas *) fPad->GetCanvas();
	fCanvas->Connect("ProcessedEvent(Int_t,Int_t,Int_t,TObject*)",
	   "THistogrator",this,"GotMouseEvent(Int_t,Int_t,Int_t,TObject*)");
	fCanvas->Connect("Closed()","THistogrator",this,"GotClosed()");
d18 13
a30 4
THistogrator::~THistogrator() {
	if (fCanvas) fCanvas->Disconnect(fCanvas,0,this,0);
	delete fStats;
	delete fHist;
d35 6
a40 9
bool THistogrator::CheckIfZombie() {
	if ((fState==kZOMBIE) || !grootutil::GetPad(fHist) || 
			!grootutil::GetPad(fAssocHist) || !fCanvas) {
		fState = kZOMBIE;
		return kTRUE;
	} else {
		return kFALSE;
	}
	return kFALSE;
d45 10
a54 6
void THistogrator::Paint() {
	fPad->cd();
	fHist->Paint();
	fStats->Paint();
	fCanvas->Modified();
	fCanvas->Update();
d59 8
a66 4
void THistogrator::GotMouseEvent(Int_t evt, Int_t x, Int_t y, TObject *sel) {
	TCanvas *cnv = (TCanvas *) gTQSender;
	TPad	*pad = (TPad *)	   cnv->GetSelectedPad();
	if (pad != fPad) return;
d68 1
a68 2
	double padx = fPad->AbsPixeltoX(x);
	double pady = fPad->AbsPixeltoY(y);
d70 24
a93 13
	switch (evt) {
		case kButton1Up:
			ExecuteButton1Up(padx, pady);
			break;
		case kMouseMotion:
			ExecuteMotion(padx, pady);
			break;
		case kKeyPress:
			ExecuteKey();
			break;
		default:
			break;
	}
a94 1

@
